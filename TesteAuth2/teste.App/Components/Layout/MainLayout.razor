﻿﻿﻿@using Microsoft.AspNetCore.Components.Authorization
@using teste.App.Security
@using teste.Application.Services

@inherits LayoutComponentBase
@inject CustomAuthProvider AuthProvider
@inject NavigationManager Navigation
@inject CartService CartService


<RadzenComponents @rendermode="InteractiveServer" />

<CascadingAuthenticationState>
	<RadzenLayout>
		<RadzenHeader>
			<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Style="width: 100%; padding: 0 16px;">

				<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8px">
					<RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
					<RadzenLabel Text="Store" />
				</RadzenStack>
				<AuthorizeView>
					<Authorized>
						<div style="margin-left: 75%">
							<RadzenLink Icon="shopping_cart" Path="cart">
								@if (CartService.GetCartItemCount() > 0)
								{
									<span style="background: red; color: white; border-radius: 40%;
                         padding: 2px 8px; font-size: 12px; margin-left: 5px;">
										@CartService.GetCartItemCount()
									</span>
								}
							</RadzenLink>
						</div>
							<RadzenMenu>
							<ChildContent>
								<RadzenMenuItem Text="Perfil" Icon="account_circle">
									<RadzenMenuItem Text="Dashboard" Path="dashboard"></RadzenMenuItem>
									<RadzenMenuItem Text="Products" Path="products"></RadzenMenuItem>
									<RadzenMenuItem Text="My cart" Path="cart" />
									<RadzenMenuItem Text="Logout" Click="AuthProvider.Logout"></RadzenMenuItem>
								</RadzenMenuItem>
							</ChildContent>
						</RadzenMenu>
					</Authorized>
					<NotAuthorized>
						<RadzenButton Text="Login" Click="LoginPage" />
					</NotAuthorized>
				</AuthorizeView>
			</RadzenStack>
		</RadzenHeader>
		<RadzenSidebar @bind-Expanded="@sidebar1Expanded">
			<RadzenPanelMenu>
				<AuthorizeView Roles="Admin, Manager, User">
					<Authorized>
						@if (context.User.IsInRole("Admin") || context.User.IsInRole("Manager") || context.User.IsInRole("User"))
						{
							<RadzenPanelMenuItem Text="Dashboard" Icon="account_box" Path="dashboard" />
							<RadzenPanelMenuItem Text="Products" Icon="inventory_2" Path="products" />
							<RadzenPanelMenuItem Text="Store" Icon="store" Path="store" />
						}
					</Authorized>
					<NotAuthorized>
						<RadzenPanelMenuItem Text="Home" Icon="home" Path="" />
						<RadzenPanelMenuItem Text="Store" Icon="store" Path="store" />
					</NotAuthorized>
				</AuthorizeView>
			</RadzenPanelMenu>
			<div class="rz-p-4">
				Sidebar
			</div>
		</RadzenSidebar>
		<RadzenBody>
			<div class="rz-p-4">
				@Body
			</div>
		</RadzenBody>
		<RadzenFooter>
			Footer
		</RadzenFooter>
	</RadzenLayout>
</CascadingAuthenticationState>

@code {
	bool sidebar1Expanded = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await AuthProvider.InitializeAuthState();
			CartService.OnChange += StateHasChanged;
			// StateHasChanged();
		}
	}

	public void LoginPage(){
		Navigation.NavigateTo("/login");
	}

	public void Dispose()
	{
		CartService.OnChange -= StateHasChanged;
	}
}