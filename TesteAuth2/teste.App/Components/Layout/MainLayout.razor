﻿﻿﻿@using Microsoft.AspNetCore.Components.Authorization
@using teste.App.Security
@inherits LayoutComponentBase
@inject CustomAuthProvider AuthProvider

<RadzenComponents @rendermode="InteractiveServer" />

<CascadingAuthenticationState>
	<RadzenLayout>
		<RadzenHeader>
			<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
				<RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
				<RadzenLabel Text="Header" />
			</RadzenStack>
		</RadzenHeader>
		<RadzenSidebar @bind-Expanded="@sidebar1Expanded">
			<RadzenPanelMenu>
				<AuthorizeView Roles="Admin, Manager, User">
					<Authorized>
						@if (context.User.IsInRole("Admin") || context.User.IsInRole("Manager") || context.User.IsInRole("User"))
						{
							<RadzenPanelMenuItem Text="Dashboard" Icon="account_box" Path="dashboard" />
							
						}
					</Authorized>
					<NotAuthorized>
						<RadzenPanelMenuItem Text="Home" Icon="home" Path="" />
						<RadzenPanelMenuItem Text="Login" Icon="account_box" Path="login" />
					</NotAuthorized>
				</AuthorizeView>
			</RadzenPanelMenu>
			<div class="rz-p-4">
				Sidebar
			</div>
		</RadzenSidebar>
		<RadzenBody>
			<div class="rz-p-4">
				@Body
			</div>
		</RadzenBody>
		<RadzenFooter>
			Footer
		</RadzenFooter>
	</RadzenLayout>
</CascadingAuthenticationState>

@code {
	bool sidebar1Expanded = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await AuthProvider.InitializeAuthState();
			StateHasChanged();
		}
	}
}