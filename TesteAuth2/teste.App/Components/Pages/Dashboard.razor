@page "/dashboard"
@attribute [Authorize]

@using Blazored.LocalStorage
@using System.Security.Claims
@using teste.Domain.Models
@using teste.Application.Interfaces
@using teste.App.Security

@inject CustomAuthProvider CustomAuth
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject Radzen.NotificationService notification
@inject IAccountService AccountService
@inject IProductService ProductService

<RadzenButton Click="showFormProduct" style="margin-right: 12px; padding: 10px 20px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; transition: background-color 0.3s;"
              HoverStyle="background-color: #0056b3;">Cadastrar Produto</RadzenButton>

<RadzenButton Click="showListUser" style="margin-right: 12px; padding: 10px 20px; background-color: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer; transition: background-color 0.3s;"
              HoverStyle="background-color: #218838;">Lista de Usuários</RadzenButton>

@if (showUserList)
{
    <br />
    <RadzenDataGrid PageSize="5" AllowPaging="true" AllowSorting="true" Data="@Users" ColumnWidth="400px">
        <Columns>
            <RadzenDataGridColumn Property="Username" Title="Username" Width="150px" />
            <RadzenDataGridColumn Property="Email" Title="Email" Width="250px" />
            <RadzenDataGridColumn Title="Role" Width="250px">
                <Template Context="user">
                    @user.Roles.ToString()
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@if (showProductForm)
{
    <br />
    <RadzenStack style="background-color: rgba(255,255,255,0.4); width: 40%; padding: 16px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);" class="rz-p-12">
        <EditForm Model="Products" FormName="FormProduct" OnSubmit="HandleProduct">
            <div style="margin-bottom: 12px;">
                <RadzenText Style="color: #333; font-size: 14px; font-weight: bold;">Code:</RadzenText>
                <RadzenNumeric class="fieldNumeric" @bind-Value="Products.Code" ShowUpDown="false" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
            </div>
            <div style="margin-bottom: 12px;">
                <RadzenText Style="color: #333; font-size: 14px; font-weight: bold;">Name:</RadzenText>
                <RadzenTextBox @bind-Value="Products.NameProduct" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
            </div>
            <div style="margin-bottom: 12px;">
                <RadzenText Style="color: #333; font-size: 14px; font-weight: bold;">Price:</RadzenText>
                <RadzenNumeric @bind-Value="Products.Price" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
            </div>
            <div style="margin-bottom: 12px;">
                <RadzenText Style="color: #333; font-size: 14px; font-weight: bold;">Active:</RadzenText>
                <RadzenCheckBox @bind-Value="Products.Active" Name="CheckBox1" style="margin-top: 5px;" />
            </div>

            <div style="margin-top: 30px">
                <RadzenButton ButtonType="ButtonType.Submit" Text="Register" ButtonStyle="ButtonStyle.Primary" />
            </div>
        </EditForm>
    </RadzenStack>
}

<RadzenButton Click="CustomAuth.Logout" style="margin-top: 12px; padding: 10px 20px; background-color: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer; transition: background-color 0.3s;"
HoverStyle="background-color: #c82333;">Logout</RadzenButton>

@code {
    
    private List<User> Users = new();
    private Product Products = new();
    private bool showUserList = false;
    private bool showProductForm = false;
    private string value = "";

    protected override async Task OnInitializedAsync()
    {
        await CustomAuth.InitializeAuthState();
        Users = await AccountService.GetAllUsersAsync();
    }

    private void showListUser()
    {
        showUserList = !showUserList;
    }

    private void showFormProduct()
    {
        showProductForm = !showProductForm;
    }

    private async Task HandleProduct()
    {
        try
        {
            var existCode = await ProductService.GetByCodeAsync(Products.Code);
            var existProductName = await ProductService.GetProductNameAsync(Products.NameProduct);

            if (existCode != null)
            {
                notification.Notify(Radzen.NotificationSeverity.Error, "Erro", "Code already exists!");
                return;
            }

            if (existProductName != null)
            {
                notification.Notify(Radzen.NotificationSeverity.Error, "Erro", "Product Name already exists!");
                return;

            }

            await ProductService.AddProductAsync(Products);
            Products = new();
            notification.Notify(Radzen.NotificationSeverity.Success, "Product Created Success!");
        }catch(Exception ex){
            Console.WriteLine("Error register Product: " + ex);
        }
    }

    
}
