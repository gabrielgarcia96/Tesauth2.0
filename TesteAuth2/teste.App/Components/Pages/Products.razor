@page "/products"

@using Blazored.LocalStorage
@using System.Security.Claims
@using teste.Domain.Models
@using teste.Application.Interfaces
@using teste.App.Security


@inject CustomAuthProvider CustomAuth
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject Radzen.NotificationService notification
@inject IProductService ProductService

<RadzenButton Click="showFormProduct" style="margin-right: 12px; padding: 10px 20px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; transition: background-color 0.3s;"
              HoverStyle="background-color: #0056b3;">Cadastrar Produto</RadzenButton>
<br />
@if (showProductForm)
{
    <br />
    <RadzenStack style="background-color: rgba(255,255,255,0.4); width: 40%; padding: 16px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);" class="rz-p-12">
        <EditForm Model="Product" FormName="FormProduct" OnSubmit="@(isEditing ? UpdateProduct : HandleProduct)">
            <div style="margin-bottom: 12px;">
                <RadzenText Style="color: #333; font-size: 14px; font-weight: bold;">Code:</RadzenText>
                <RadzenNumeric class="fieldNumeric" @bind-Value="Product.Code" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;"  />
            </div>
            <div style="margin-bottom: 12px;">
                <RadzenText Style="color: #333; font-size: 14px; font-weight: bold;">Name:</RadzenText>
                <RadzenTextBox @bind-Value="Product.NameProduct" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
            </div>
            <div style="margin-bottom: 12px;">
                <RadzenText Style="color: #333; font-size: 14px; font-weight: bold;">Price:</RadzenText>
                <RadzenNumeric @bind-Value="Product.Price" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
            </div>
            <div style="margin-bottom: 12px;">
                <RadzenText Style="color: #333; font-size: 14px; font-weight: bold;">Barcode:</RadzenText>
                <RadzenNumeric @bind-Value="Product.CodBarras" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
            </div>
            <div style="margin-bottom: 12px;">
                <RadzenText Style="color: #333; font-size: 14px; font-weight: bold;">Active:</RadzenText>
                <RadzenCheckBox @bind-Value="Product.Active" Name="CheckBox1" style="margin-top: 5px;" />
            </div>

            <div style="margin-bottom: 12px;">
                <RadzenText Style="color: #333; font-size: 14px; font-weight: bold;">Product Image:</RadzenText>
                <RadzenUpload Change="@(async (UploadChangeEventArgs args) => await OnFileUpload(args))" />
            </div>

            @if (!string.IsNullOrEmpty(Product.ImageUrl))
            {
                <div style="margin-top: 10px;">
                    <img src="@Product.ImageUrl" alt="Uploaded Image" style="max-width: 100%; border-radius: 4px; border: 1px solid #ddd;" />
                </div>
            }

            <div style="margin-top: 30px">
                <RadzenButton ButtonType="ButtonType.Submit" Text="@submitButtonText" ButtonStyle="ButtonStyle.Primary" />
            </div>
        </EditForm>
    </RadzenStack>
}

<br />

<RadzenDataGrid PageSize="10" AllowPaging="true" AllowSorting="true" Data="@ListProduct" ColumnWidth="400px">
    <Columns>
        <RadzenDataGridColumn  Property="Code" Title="Code" Width="50px" />
        <RadzenDataGridColumn Property="NameProduct" Title="Name" Width="100px" />
        <RadzenDataGridColumn Property="Price" Title="Price" Width="100px">
            <Template Context="data">
                R$ @(data.Price.ToString("N2") ?? "0,00")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="CodBarras" Title="Barcode" Width="100px" />
        <RadzenDataGridColumn Property="Active" Title="Status" Width="100px" />

        <RadzenDataGridColumn Title="Actions" Width="200px">
            <Template Context="product">
                <RadzenButton Icon="edit" Text="Edit" Click="@(args => EditProduct(product))" Style="margin-right: 10px;" />
                <RadzenButton Icon="delete" Text="Delete" Click="@(args => DeleteProduct(product.Code))" ButtonStyle="ButtonStyle.Danger" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {

    private Product Product = new();

    private List<Product> ListProduct = new();
    private bool showProductForm = false;
    private bool isEditing = false;
    private string submitButtonText = "Register";

    protected override async Task OnInitializedAsync()
    {
        
        ListProduct = await ProductService.GetAllProductsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
        await CustomAuth.InitializeAuthState();
        }
    }


    private void showFormProduct()
    {
        Product = new(); 
        showProductForm = true;
        isEditing = false;
        submitButtonText = "Register";
    }

    private async Task HandleProduct()
    {
        try
        {
            var existCode = await ProductService.GetByCodeAsync(Product.Code);
            var existProductName = await ProductService.GetProductNameAsync(Product.NameProduct);

            if (existCode != null)
            {
                notification.Notify(Radzen.NotificationSeverity.Error, "Erro", "Code already exists!");
                return;
            }

            if (existProductName != null)
            {
                notification.Notify(Radzen.NotificationSeverity.Error, "Erro", "Product Name already exists!");
                return;

            }

            await ProductService.AddProductAsync(Product);

            ListProduct = await ProductService.GetAllProductsAsync();

            Product = new();
            notification.Notify(Radzen.NotificationSeverity.Success, "Product Created Success!");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error register Product: " + ex);
        }
    }

    private void EditProduct(Product product)
    {
        Product = new Product
            {
                Code = product.Code,
                NameProduct = product.NameProduct,
                Price = product.Price,
                Active = product.Active,
                CodBarras = product.CodBarras,
                ImageUrl = product.ImageUrl
            };

        showProductForm = true;
        isEditing = true;
        submitButtonText = "Update";
    }

    private async Task UpdateProduct()
    {
        try
        {
            await ProductService.UpdateAsync(Product.Code, Product);
            ListProduct = await ProductService.GetAllProductsAsync();

            Product = new();
            showProductForm = false;
            isEditing = false;

            notification.Notify(Radzen.NotificationSeverity.Success, "Product Updated Successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error updating Product: " + ex);
        }
    }

    private async Task DeleteProduct(int code)
    {
        await ProductService.DeleteAsync(code);
        ListProduct = await ProductService.GetAllProductsAsync();
        notification.Notify(Radzen.NotificationSeverity.Success, "Product Deleted!");
    }

    private async Task OnFileUpload(UploadChangeEventArgs args)
    {
        try
        {
            var file = args.Files.FirstOrDefault();
            if (file != null)
            {
                long maxSize = 5 * 1024 * 1024;
                if (file.Size > maxSize)
                {
                    notification.Notify(Radzen.NotificationSeverity.Error, "Erro", "O arquivo excede o tamanho máximo permitido (5 MB).");
                    return;
                }

                using var stream = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(stream);
                var imageBytes = stream.ToArray();
                Product.ImageUrl = Convert.ToBase64String(imageBytes);

                notification.Notify(Radzen.NotificationSeverity.Success, "Imagem carregada com sucesso!");
            }
        }
        catch (Exception ex)
        {
            notification.Notify(Radzen.NotificationSeverity.Error, "Erro ao carregar imagem!");
            Console.WriteLine(ex);
        }
    }
}
